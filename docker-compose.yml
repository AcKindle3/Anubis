version: '3.7'

services:
  traefik:
    image: "traefik:v2.0.0-rc3"
    command:
      - "--api.insecure=true"

      - "--metrics.prometheus=true"

      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.watch"
      - "--providers.docker.exposedbydefault=false"

      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"

      - "--certificatesresolvers.tls.acme.httpchallenge=true"
      - "--certificatesresolvers.tls.acme.httpchallenge.entrypoint=http"
      - "--certificatesresolvers.tls.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.tls.acme.storage=/letsencrypt/acme.json"
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_data:/letsencrypt"
    networks:
      - traefik-proxy
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"

        - "traefik.http.middlewares.traefik-auth.basicauth.users=${AUTH}"
        - "traefik.http.middlewares.traefik-auth.basicauth.removeheader=true"

        - "traefik.http.routers.traefik.rule=Host(`traefik.nyu.singles`)"
        - "traefik.http.routers.traefik.entrypoints=https"
        - "traefik.http.routers.traefik.tls.certresolver=tls"
        - "traefik.http.routers.traefik.middlewares=traefik-auth@docker"
        - "traefik.http.middlewares.traefik.redirectscheme.scheme=https"
        #- "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"

        - "traefik.http.middlewares.redirect.redirectregex.regex=^http://(.*)"
        - "traefik.http.middlewares.redirect.redirectregex.replacement=https://$$1"

  db:
    build: ./db
    dns: [8.8.8.8]
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
      - "MYSQL_DATABASE=os"
    ports:
      - "127.0.0.1:3306:3306"
    volumes:
      - "db_data:/var/lib/mysql"
    networks:
      - traefik-proxy
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=false"

  api:
    build: api
    environment:
      NODE_ENV: prod
    networks:
      - traefik-proxy
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
      
        - "traefik.http.routers.jaime-api-http.rule=Host(`nyu.singles`)"
        - "traefik.http.routers.jaime-api-http.entrypoints=http"
        - "traefik.http.routers.jaime-api-http.middlewares=redirect"      

        - "traefik.http.routers.jaime-api.rule=Host(`nyu.singles`)"
        - "traefik.http.routers.jaime-api.entrypoints=https"
        - "traefik.http.routers.jaime-api.tls.certresolver=tls"
        - "traefik.http.services.jaime-api.loadbalancer.server.port=4000"
        - "traefik.http.middlewares.jaime-api.redirectscheme.scheme=https"

  
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   # ports:
  #   #   - '9100:9100'
  #   volumes:
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #     - /proc:/host/proc:ro
  #   networks:
  #     - traefik-proxy
  
  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus-grafana/prometheus/:/etc/prometheus/
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   networks:
  #     - traefik-proxy
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     labels:
  #       - "traefik.enable=true"
        
  #       - "traefik.http.routers.prometheus-http.rule=Host(`prometheus.nyu.singles`)"
  #       - "traefik.http.routers.prometheus-http.entrypoints=http"
  #       - "traefik.http.routers.prometheus-http.middlewares=redirect"
        
  #       - "traefik.http.routers.prometheus.rule=Host(`prometheus.nyu.singles`)"
  #       - "traefik.http.routers.prometheus.service=prometheus"
  #       - "traefik.http.routers.prometheus.entrypoints=https"
  #       - "traefik.http.routers.prometheus.tls.certresolver=tls"
  #       #- "traefik.http.routers.prometheus.middlewares=traefik-auth@docker"

  #       # individual IPs should be whitelisted here
  #       - "traefik.http.middlewares.prometheus.ipwhitelist.sourcerange=172.0.0.0/8"

  #       - "traefik.http.middlewares.prometheus.redirectscheme.scheme=https"

  #       - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        
  #       - "traefik.docker.network=traefik-proxy"
  
  # grafana:
  #   image: grafana/grafana
  #   depends_on:
  #     - prometheus
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./prometheus-grafana/grafana/provisioning/:/etc/grafana/provisioning/
  #   networks:
  #     - traefik-proxy
  #   environment:
  #     - "GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}"
  #     - "GF_USERS_ALLOW_SIGN_UP=false"
  #     - "GF_INSTALL_PLUGINS=grafana-piechart-panel"
  #   user: "104"
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     labels:
  #       - "traefik.enable=true"
        
  #       - "traefik.http.routers.grafana-http.rule=Host(`grafana.nyu.singles`)"
  #       - "traefik.http.routers.grafana-http.entrypoints=http"
  #       - "traefik.http.routers.grafana-http.middlewares=redirect"
        
  #       - "traefik.http.routers.grafana.rule=Host(`grafana.nyu.singles`)"
  #       - "traefik.http.routers.grafana.service=grafana"
  #       - "traefik.http.routers.grafana.entrypoints=https"
  #       - "traefik.http.routers.grafana.tls.certresolver=tls"

  #       - "traefik.http.middlewares.grafana.redirectscheme.scheme=https"
        
  #       - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  #       - "traefik.docker.network=traefik-proxy"


networks:
  traefik-proxy:
    name: traefik-proxy


volumes:
  prometheus_data:
  grafana_data:
  traefik_data:
  db_data:
  
