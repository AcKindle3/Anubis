apiVersion: apps/v1
kind: Deployment
metadata:
  name: anubis-web
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: anubis
    component: web
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: anubis
      component: web
  replicas: {{ .Values.web.replicas }}
  {{- if .Values.rollingUpdates }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: anubis
        component: web
    spec:
      dnsPolicy: ClusterFirst
      containers:
      - name: web
        image: {{ .Values.web.image }}:{{ .Values.web.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 2
            memory: 500Mi
        ports:
        - name: web
          containerPort: 3000
        {{- if .Values.healthChecks }}
        startupProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 60
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          failureThreshold: 10
          periodSeconds: 60
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 1
        {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: anubis-web
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: anubis
    component: web
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
spec:
  selector:
    app.kubernetes.io/name: anubis
    component: web
  ports:
  - name: web
    port: 3000
    targetPort: 3000
